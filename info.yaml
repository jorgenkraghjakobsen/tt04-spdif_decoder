--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
#    - counter.v
    - spdif_decoder.v
  top_module:  "tt_jkj_spdif_decoder"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Jorgen Kragh Jakobsen"      # Your name
  title:        "SPDIF to i2s converter"      # Project title
  language:     "Verlog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "The design take a flashing light from an audio source known as 'spdif audio' and convert that to an i2s interface"
  # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      SPDIF audio is a well known and width spread industri standart for audio distibution on a single optical or electical interface 
      it embed both the audio data and the clock in the same signal.
      I2S is a well known and width spread industri standart for audio distibution on a single interface
      it seperate clock signal and audio pcm date and a left and right channel signal
      Digial audio amplifiers and DAC's often use I2S as input interface


# dInstructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      If no smolke coming out after supply has been applied all good :-)

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - rx_in
    - clk_in
    - resetb
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - i2s_do
    - i2s_bck
    - i2s_lr
    - audio_sync
    - debug0
    - debug1
    - debug2
    - debug3
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          "audio,   "      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
